// File generated by FlutterFire CLI.
// ignore_for_file: lines_longer_than_80_chars, avoid_classes_with_only_static_members
import 'package:dumbdumb_flutter_app/app/common/constants/enums.dart';
import 'package:firebase_core/firebase_core.dart' show FirebaseOptions;
import 'package:flutter/foundation.dart' show defaultTargetPlatform, kIsWeb, TargetPlatform;

/// Default [FirebaseOptions] for use with your Firebase apps.
///
/// Example:
/// ```dart
/// import 'firebase_options.dart';
/// // ...
/// await Firebase.initializeApp(
///   options: DefaultFirebaseOptions.currentPlatform,
/// );
/// ```
class DefaultFirebaseOptions {
  /// Unified method to access FirebaseOptions based on the [EnvironmentType]
  static FirebaseOptions currentPlatform(EnvironmentType type) {
    if (kIsWeb) {
      throw UnsupportedError(
        'DefaultFirebaseOptions have not been configured for web - '
        'you can reconfigure this by running the FlutterFire CLI again.',
      );
    }
    switch (defaultTargetPlatform) {
      case TargetPlatform.android:
        return _androidOption(type);
      case TargetPlatform.iOS:
        return _iOSOption(type);
      case TargetPlatform.macOS:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for macos - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      case TargetPlatform.windows:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for windows - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      case TargetPlatform.linux:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for linux - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      default:
        throw UnsupportedError(
          'DefaultFirebaseOptions are not supported for this platform.',
        );
    }
  }

  static FirebaseOptions _androidOption(EnvironmentType type) {
    switch (type) {
      case EnvironmentType.production:
        return android;
      case EnvironmentType.staging:
        return androidStaging;
      case EnvironmentType.development:
        return androidDev;
      default:
        return android;
    }
  }

  /// ---------------------------------------- Firebase Configuration Data ------------------------------------
  ///
  ///
  ///
  // TODO: To be update with your own project configuration data

  static const FirebaseOptions android = FirebaseOptions(
      apiKey: 'Your api key',
      appId: 'Your app id',
      messagingSenderId: 'Your messaging sender id',
      projectId: 'Your project id',
      storageBucket: 'Your storage bucket id');

  static const FirebaseOptions androidStaging = FirebaseOptions(
      apiKey: 'Your api key',
      appId: 'Your app id',
      messagingSenderId: 'Your messaging sender id',
      projectId: 'Your project id',
      storageBucket: 'Your storage bucket id');

  static const FirebaseOptions androidDev = FirebaseOptions(
      apiKey: 'Your api key',
      appId: 'Your app id',
      messagingSenderId: 'Your messaging sender id',
      projectId: 'Your project id',
      storageBucket: 'Your storage bucket id');

  static FirebaseOptions _iOSOption(EnvironmentType type) {
    switch (type) {
      case EnvironmentType.production:
        return ios;
      case EnvironmentType.staging:
        return iosStaging;
      case EnvironmentType.development:
        return iosDev;
      default:
        return ios;
    }
  }

  static const FirebaseOptions ios = FirebaseOptions(
      apiKey: 'Your api key',
      appId: 'Your app id',
      messagingSenderId: 'Your sender id',
      projectId: 'Your project id',
      storageBucket: 'Your storage bucket',
      iosClientId: 'Your iosClientId',
      iosBundleId: 'Your iosBundleId');

  static const FirebaseOptions iosStaging = FirebaseOptions(
      apiKey: 'Your api key',
      appId: 'Your app id',
      messagingSenderId: 'Your sender id',
      projectId: 'Your project id',
      storageBucket: 'Your storage bucket',
      iosClientId: 'Your iosClientId',
      iosBundleId: 'Your iosBundleId');

  static const FirebaseOptions iosDev = FirebaseOptions(
      apiKey: 'Your api key',
      appId: 'Your app id',
      messagingSenderId: 'Your sender id',
      projectId: 'Your project id',
      storageBucket: 'Your storage bucket',
      iosClientId: 'Your iosClientId',
      iosBundleId: 'Your iosBundleId');

  ///
  ///
  ///
  /// ---------------------------------------- Firebase Configuration Data End ------------------------------------
}
